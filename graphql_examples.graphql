# GraphQL 查詢和變更操作範例
# 您可以在 http://localhost:8080/graphiql 中執行這些範例

# ==================== 查詢範例 ====================

# 1. 取得所有用戶基本資訊
query GetAllUsers {
  users {
    id
    name
    email
    phone
    createdAt
    postCount
  }
}

# 2. 取得特定用戶及其文章
query GetUserWithPosts {
  user(id: 1) {
    id
    name
    email
    posts {
      id
      title
      content
      status
      createdAt
    }
  }
}

# 3. 根據 Email 查找用戶
query GetUserByEmail {
  userByEmail(email: "ming@example.com") {
    id
    name
    email
    postCount
  }
}

# 4. 搜尋用戶（關鍵字搜尋）
query SearchUsers {
  searchUsers(keyword: "張") {
    id
    name
    email
    phone
  }
}

# 5. 取得所有文章及其作者資訊
query GetAllPosts {
  posts {
    id
    title
    content
    status
    createdAt
    author {
      id
      name
      email
    }
  }
}

# 6. 取得特定作者的文章
query GetPostsByAuthor {
  postsByAuthor(authorId: 1) {
    id
    title
    status
    createdAt
    updatedAt
  }
}

# 7. 根據狀態取得文章
query GetPublishedPosts {
  postsByStatus(status: PUBLISHED) {
    id
    title
    author {
      name
    }
    createdAt
  }
}

# 8. 搜尋文章（標題或內容）
query SearchPosts {
  searchPosts(keyword: "Spring") {
    id
    title
    content
    author {
      name
    }
  }
}

# ==================== 變更操作範例 ====================

# 9. 創建新用戶
mutation CreateUser {
  createUser(input: {
    name: "陳小安"
    email: "an@example.com"
    phone: "0945678901"
  }) {
    id
    name
    email
    phone
    createdAt
  }
}

# 10. 更新用戶資訊
mutation UpdateUser {
  updateUser(input: {
    id: 1
    name: "張小明（已更新）"
    phone: "0912345999"
  }) {
    id
    name
    email
    phone
    updatedAt
  }
}

# 11. 創建新文章
mutation CreatePost {
  createPost(input: {
    title: "Docker 容器化部署指南"
    content: "Docker 是現代應用部署的重要工具，能夠確保應用在不同環境中的一致性..."
    authorId: 1
    status: DRAFT
  }) {
    id
    title
    content
    status
    author {
      name
    }
    createdAt
  }
}

# 12. 更新文章
mutation UpdatePost {
  updatePost(input: {
    id: 1
    title: "Spring Boot 完全入門指南（更新版）"
    content: "Spring Boot 是一個革命性的 Java 框架..."
  }) {
    id
    title
    content
    status
    updatedAt
  }
}

# 13. 發布文章
mutation PublishPost {
  publishPost(id: 3) {
    id
    title
    status
    updatedAt
  }
}

# 14. 歸檔文章
mutation ArchivePost {
  archivePost(id: 2) {
    id
    title
    status
    updatedAt
  }
}

# 15. 刪除文章
mutation DeletePost {
  deletePost(id: 5)
}

# 16. 刪除用戶
mutation DeleteUser {
  deleteUser(id: 3)
}

# ==================== 複雜查詢範例 ====================

# 17. 綜合查詢 - 取得用戶及其已發布文章的詳細資訊
query GetUserPublishedPosts {
  users {
    id
    name
    email
    posts {
      id
      title
      status
      createdAt
    }
    postCount
  }
}

# 18. 使用片段（Fragment）的查詢
fragment UserInfo on User {
  id
  name
  email
  phone
  createdAt
}

fragment PostInfo on Post {
  id
  title
  content
  status
  createdAt
  updatedAt
}

query GetUsersWithFragments {
  users {
    ...UserInfo
    posts {
      ...PostInfo
    }
  }
}

# 19. 使用變數的查詢
query GetUserById($userId: ID!) {
  user(id: $userId) {
    id
    name
    email
    posts {
      id
      title
      status
    }
  }
}

# 變數 (Variables):
# {
#   "userId": "1"
# }

# 20. 使用變數的變更操作
mutation CreateUserWithVariables($userInput: CreateUserInput!) {
  createUser(input: $userInput) {
    id
    name
    email
    phone
    createdAt
  }
}

# 變數 (Variables):
# {
#   "userInput": {
#     "name": "變數測試用戶",
#     "email": "variable@example.com",
#     "phone": "0956789012"
#   }
# }